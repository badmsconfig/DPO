# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Selenium, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ChromeDriver –∏ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
import time
from pathlib import Path

# üîß –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±-–¥—Ä–∞–π–≤–µ—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ headless-—Ä–µ–∂–∏–º–µ
def get_driver():
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –æ–ø—Ü–∏–π –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ Chrome
    chrome_options = Options()
    chrome_options.add_argument("--headless")  # –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –±–µ–∑ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    chrome_options.add_argument("--disable-gpu")  # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ GPU –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    chrome_options.add_argument("--no-sandbox")  # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Å–æ—á–Ω–∏—Ü—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    chrome_options.add_argument("--window-size=1920,1080")  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ ChromeDriver —Å –ø–æ–º–æ—â—å—é webdriver-manager
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)
    return driver

# üìÑ –°–ª–æ–≤–∞—Ä—å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
elements_to_parse = {
    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    "page_title": [
        {"type": "css", "value": "section.desc_page h2.desc_page-title"},
    ],
    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    "page_text": [
        {"type": "css", "value": "section.desc_page div.desc_page-text p"},
    ],
    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤
    "info_block_title": [
        {"type": "css", "value": "h2.info_block__images-title span"},
    ],
    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤
    "info_block_text": [
        {"type": "css", "value": "div.info_block-desc p"},
    ],
    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Å—Å—ã–ª–æ–∫
    "info_links": [
        {"type": "css", "value": "a.info_block__list-link"},
    ],
    # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Å–µ–∫—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    "home_desc_section": [
        {"type": "css", "value": "section.home_desc > *"},
    ],
    # –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –æ–±—É—á–µ–Ω–∏—è
    "education_features": {
        "trigger_text": "–¢–∞–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:",
        "selector": {"type": "xpath", "value": "//p[contains(text(), '–¢–∞–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏–º–µ–µ—Ç —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:')]/following-sibling::ul[1]/li"},
    },
    # –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ä–º –æ–±—É—á–µ–Ω–∏—è
    "learning_forms": {
        "trigger_text": "–í –Ω–∞—à–µ–π –∞–∫–∞–¥–µ–º–∏–∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ö:",
        "selector": {"type": "xpath", "value": "//h3[contains(text(), '–í –Ω–∞—à–µ–π –∞–∫–∞–¥–µ–º–∏–∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ö:')]/following-sibling::ul[1]/li"},
    },
    # –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    "medical_education": {
        "trigger_text": "–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—è—â–µ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π",
        "selector": {"type": "xpath", "value": "//p[contains(., '–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—è—â–µ–≥–æ —Å–æ—Å—Ç–∞–≤–∞')]/following-sibling::ul[1]/li/a"},
    },
    # –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
    "construction_courses": {
        "trigger_text": "–ö—É—Ä—Å—ã –Ω–∞ –±–∞–∑–µ —Å—Ä–µ–¥–Ω–µ-—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏–ª–∏ –≤—ã—Å—à–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è",
        "selector": {"type": "xpath", "value": "//p[contains(., '–ö—É—Ä—Å—ã –Ω–∞ –±–∞–∑–µ —Å—Ä–µ–¥–Ω–µ-—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∏–ª–∏ –≤—ã—Å—à–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è')]/following-sibling::ul[1]/li/a"},
    },
    # –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
    "special_courses": {
        "trigger_text": "–ö—É—Ä—Å—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –Ω–∞ –±–∞–∑–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –∏/–∏–ª–∏ –≤—ã—Å—à–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è",
        "selector": {"type": "xpath", "value": "//p[contains(., '–ö—É—Ä—Å—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –Ω–∞ –±–∞–∑–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –∏/–∏–ª–∏ –≤—ã—Å—à–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è')]/following-sibling::ul[1]/li/a"},
    },
}

# üß† –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–π –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
def parse_website(url, driver):
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–∞—Ä—Å–∏–Ω–≥–∞
    results = {
        "url": url,
        "sections": [],  # –°–ø–∏—Å–æ–∫ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —Ç–µ–∫—Å—Ç–æ–≤
        "links": [],  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Å—Å—ã–ª–æ–∫
        "education_features": [],  # –°–ø–∏—Å–æ–∫ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –æ–±—É—á–µ–Ω–∏—è
        "learning_forms": [],  # –°–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º –æ–±—É—á–µ–Ω–∏—è
        "medical_education": [],  # –°–ø–∏—Å–æ–∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        "construction_courses": [],  # –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
        "special_courses": [],  # –°–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
    }

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    driver.get(url)
    time.sleep(2)  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (2 —Å–µ–∫—É–Ω–¥—ã)

    # –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    title_texts = []
    for selector in elements_to_parse["page_title"]:
        try:
            if selector["type"] == "css":
                elements = driver.find_elements(By.CSS_SELECTOR, selector["value"])
            elif selector["type"] == "xpath":
                elements = driver.find_elements(By.XPATH, selector["value"])
            # –°–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –Ω–∞–ª–∏—á–∏—é —Ç–µ–∫—Å—Ç–∞
            title_texts.extend([el.text.strip() for el in elements if el.text.strip()])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)}")
            continue

    # –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    body_texts = []
    for selector in elements_to_parse["page_text"]:
        try:
            if selector["type"] == "css":
                elements = driver.find_elements(By.CSS_SELECTOR, selector["value"])
            elif selector["type"] == "xpath":
                elements = driver.find_elements(By.XPATH, selector["value"])
            # –°–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –Ω–∞–ª–∏—á–∏—é —Ç–µ–∫—Å—Ç–∞
            body_texts.extend([el.text.strip() for el in elements if el.text.strip()])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)}")
            continue

    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —Ç–µ–∫—Å—Ç–æ–≤ –≤ —Å–µ–∫—Ü–∏–∏
    if len(title_texts) == 1 and len(body_texts) > 1:
        for i, text in enumerate(body_texts):
            results["sections"].append({
                "title": title_texts[0] if i == 0 else "",  # –ü–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫
                "text": text
            })
    else:
        for i in range(max(len(title_texts), len(body_texts))):
            title = title_texts[i] if i < len(title_texts) else ""
            text = body_texts[i] if i < len(body_texts) else ""
            results["sections"].append({"title": title, "text": text})

    # –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤
    info_titles = []
    for selector in elements_to_parse["info_block_title"]:
        try:
            if selector["type"] == "css":
                elements = driver.find_elements(By.CSS_SELECTOR, selector["value"])
            elif selector["type"] == "xpath":
                elements = driver.find_elements(By.XPATH, selector["value"])
            info_titles.extend([el.text.strip() for el in elements if el.text.strip()])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–Ω—Ñ–æ–±–ª–æ–∫–æ–≤: {str(e)}")
            continue

    # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤
    info_texts = []
    for selector in elements_to_parse["info_block_text"]:
        try:
            if selector["type"] == "css":
                elements = driver.find_elements(By.CSS_SELECTOR, selector["value"])
            elif selector["type"] == "xpath":
                elements = driver.find_elements(By.XPATH, selector["value"])
            info_texts.extend([el.text.strip() for el in elements if el.text.strip()])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–µ–∫—Å—Ç–æ–≤ –∏–Ω—Ñ–æ–±–ª–æ–∫–æ–≤: {str(e)}")
            continue

    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —Ç–µ–∫—Å—Ç–æ–≤ –∏–Ω—Ñ–æ–±–ª–æ–∫–æ–≤ –≤ —Å–µ–∫—Ü–∏–∏
    if len(info_titles) == 1 and len(info_texts) > 0:
        for i, text in enumerate(info_texts):
            results["sections"].append({
                "title": info_titles[0] if i == 0 else "",  # –ü–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫
                "text": text
            })
    else:
        for i in range(max(len(info_titles), len(info_texts))):
            title = info_titles[i] if i < len(info_titles) else ""
            text = info_texts[i] if i < len(info_texts) else ""
            results["sections"].append({"title": title, "text": text})

    # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–æ–∫
    for selector in elements_to_parse["info_links"]:
        try:
            if selector["type"] == "css":
                elements = driver.find_elements(By.CSS_SELECTOR, selector["value"])
            elif selector["type"] == "xpath":
                elements = driver.find_elements(By.XPATH, selector["value"])
            # –°–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ –∏ URL –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏
            for el in elements:
                if el.text.strip():
                    results["links"].append({
                        "text": el.text.strip(),
                        "url": el.get_attribute("href")
                    })
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Å—ã–ª–æ–∫: {str(e)}")
            continue

    # –ü–∞—Ä—Å–∏–Ω–≥ —Å–µ–∫—Ü–∏–∏ home_desc
    for selector in elements_to_parse["home_desc_section"]:
        try:
            if selector["type"] == "css":
                elements = driver.find_elements(By.CSS_SELECTOR, selector["value"])
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ö —Ç–µ–≥–∞
            for el in elements:
                tag_name = el.tag_name.lower()
                text = el.text.strip()
                if not text:
                    continue
                if tag_name in ['h2', 'h3']:
                    results["sections"].append({"title": text, "text": ""})
                elif tag_name in ['p', 'li']:
                    if results["sections"] and not results["sections"][-1]["text"]:
                        results["sections"][-1]["text"] = text
                    else:
                        results["sections"].append({"title": "", "text": text})
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ home_desc: {str(e)}")
            continue

    # –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –æ–±—É—á–µ–Ω–∏—è
    try:
        if elements_to_parse["education_features"]["selector"]["type"] == "xpath":
            elements = driver.find_elements(By.XPATH, elements_to_parse["education_features"]["selector"]["value"])
        for el in elements:
            text = el.text.strip()
            if text:
                results["education_features"].append(text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –æ–±—É—á–µ–Ω–∏—è: {str(e)}")

    # –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ä–º –æ–±—É—á–µ–Ω–∏—è
    try:
        if elements_to_parse["learning_forms"]["selector"]["type"] == "xpath":
            elements = driver.find_elements(By.XPATH, elements_to_parse["learning_forms"]["selector"]["value"])
        for el in elements:
            text = el.text.strip()
            if text:
                results["learning_forms"].append(text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–æ—Ä–º –æ–±—É—á–µ–Ω–∏—è: {str(e)}")

    # –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    try:
        if elements_to_parse["medical_education"]["selector"]["type"] == "xpath":
            elements = driver.find_elements(By.XPATH, elements_to_parse["medical_education"]["selector"]["value"])
        for el in elements:
            text = el.text.strip()
            url = el.get_attribute("href")
            if text:
                results["medical_education"].append({"text": text, "url": url})
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: {str(e)}")

    # –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
    try:
        if elements_to_parse["construction_courses"]["selector"]["type"] == "xpath":
            elements = driver.find_elements(By.XPATH, elements_to_parse["construction_courses"]["selector"]["value"])
        for el in elements:
            text = el.text.strip()
            url = el.get_attribute("href")
            if text:
                results["construction_courses"].append({"text": text, "url": url})
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤: {str(e)}")

    # –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
    try:
        if elements_to_parse["special_courses"]["selector"]["type"] == "xpath":
            elements = driver.find_elements(By.XPATH, elements_to_parse["special_courses"]["selector"]["value"])
        for el in elements:
            text = el.text.strip()
            url = el.get_attribute("href")
            if text:
                results["special_courses"].append({"text": text, "url": url})
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤: {str(e)}")

    return results

# üíæ –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Markdown-—Ñ–∞–π–ª
def save_results_to_file(results, filename="DPO_glavnaya_results.md"):
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    save_path = Path.cwd() / filename

    with open(save_path, "w", encoding="utf-8") as f:
        for res in results:
            # –ó–∞–ø–∏—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –∏ URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            f.write(f"# –°—Ç—Ä–∞–Ω–∏—Ü–∞: {res['url']}\n\n")
            f.write(f"[–û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É]({res['url']})\n\n")
            f.write(f"{'='*80}\n\n")

            # –ó–∞–ø–∏—Å—å —Å–µ–∫—Ü–∏–π —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ —Ç–µ–∫—Å—Ç–∞–º–∏
            for section in res["sections"]:
                if section["title"]:
                    f.write(f"## {section['title']}\n\n")
                if section["text"]:
                    f.write(f"{section['text']}\n\n")

            # –ó–∞–ø–∏—Å—å —Å—Å—ã–ª–æ–∫
            if res["links"]:
                f.write("## –°—Å—ã–ª–∫–∏\n\n")
                for link in res["links"]:
                    f.write(f"- [{link['text']}]({link['url']})\n")
                f.write("\n")

            # –ó–∞–ø–∏—Å—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –æ–±—É—á–µ–Ω–∏—è
            if res["education_features"]:
                f.write("## –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è\n\n")
                for item in res["education_features"]:
                    f.write(f"- {item}\n")
                f.write("\n")

            # –ó–∞–ø–∏—Å—å —Ñ–æ—Ä–º –æ–±—É—á–µ–Ω–∏—è
            if res["learning_forms"]:
                f.write("## –§–æ—Ä–º—ã –æ–±—É—á–µ–Ω–∏—è\n\n")
                for item in res["learning_forms"]:
                    f.write(f"- {item}\n")
                f.write("\n")

            # –ó–∞–ø–∏—Å—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            if res["medical_education"]:
                f.write("## –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ\n\n")
                for item in res["medical_education"]:
                    f.write(f"- [{item['text']}]({item['url']})\n")
                f.write("\n")

            # –ó–∞–ø–∏—Å—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
            if res["construction_courses"]:
                f.write("## –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã\n\n")
                for item in res["construction_courses"]:
                    f.write(f"- [{item['text']}]({item['url']})\n")
                f.write("\n")

            # –ó–∞–ø–∏—Å—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
            if res["special_courses"]:
                f.write("## –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã\n\n")
                for item in res["special_courses"]:
                    f.write(f"- [{item['text']}]({item['url']})\n")
                f.write("\n")

    print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {save_path}")
    return save_path

# üîó –°–ø–∏—Å–æ–∫ URL-–∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
urls = [
    "https://academydpo.org/",
]

# üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-–¥—Ä–∞–π–≤–µ—Ä–∞
    driver = get_driver()
    all_results = []

    # –¶–∏–∫–ª –ø–æ –≤—Å–µ–º URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    for url in urls:
        print(f"üîç –ü–∞—Ä—Å–∏–Ω–≥: {url}")
        # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        data = parse_website(url, driver)
        all_results.append(data)

    # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤–µ–±-–¥—Ä–∞–π–≤–µ—Ä–∞
    driver.quit()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Markdown-—Ñ–∞–π–ª
    save_results_to_file(all_results)